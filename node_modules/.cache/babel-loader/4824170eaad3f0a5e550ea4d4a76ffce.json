{"ast":null,"code":"var _jsxFileName = \"/Users/lyttonliao/Desktop/Blockchain_Challenge/explorer/src/frontend/components/transaction/transaction_list.jsx\";\nimport React from 'react';\nimport TransactionItem from './transaction_item';\n\nclass TransactionList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  convertToTime(unix) {\n    const date = new Date(unix * 1000);\n    return date.toLocaleDateString('default', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n  }\n\n  convertToBTC(value) {\n    return value / 100000000;\n  }\n\n  inputArr(inputs) {\n    let modifiedInputs = [];\n    inputs.forEach(input => {\n      debugger;\n\n      if (input.prev_out !== undefined) {\n        debugger;\n        const prev = input.prev_out;\n        const address = prev.addr;\n        const value = this.convertToBTC(prev.value);\n        var newInput = {\n          'address': address,\n          'value': value\n        };\n        modifiedInputs.push(newInput);\n      }\n    });\n    return modifiedInputs;\n  }\n\n  outputArr(outputs) {\n    let modifiedOutputs = [];\n    outputs.forEach(out => {\n      debugger;\n      const address = out.addr;\n      const value = this.convertToBTC(out.value);\n      const newOutput = {\n        'address': address,\n        'value': value\n      };\n      modifiedOutputs.push(newOutput);\n    });\n    return modifiedOutputs;\n  }\n\n  diffPerTx(input, output) {\n    let currVal = 0;\n    input.forEach(input => {\n      currVal -= parseFloat(input.value);\n    });\n    output.forEach(output => {\n      currVal += parseFloat(output.value);\n    });\n    return currVal;\n  }\n\n  createTxList() {\n    const allTx = this.props.txsArr.map((tx, i) => {\n      debugger;\n      const hash = tx.hash;\n      const input = this.inputArr(tx.inputs);\n      const output = this.outputArr(tx.out);\n      const time = this.convertToTime(tx.time);\n      const currVal = this.diffPerTx(input, output);\n      return React.createElement(TransactionItem, {\n        key: i,\n        hash: hash,\n        input: input,\n        output: output,\n        time: time,\n        currVal: currVal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      });\n    });\n    return allTx;\n  }\n\n  render() {\n    if (this.props.txsArr.length === undefined) return null;\n    const TxList = this.createTxList();\n    return React.createElement(\"div\", {\n      className: \"transaction-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Transactions\"), TxList);\n  }\n\n}\n\nexport default TransactionList;","map":{"version":3,"sources":["/Users/lyttonliao/Desktop/Blockchain_Challenge/explorer/src/frontend/components/transaction/transaction_list.jsx"],"names":["React","TransactionItem","TransactionList","Component","constructor","props","convertToTime","unix","date","Date","toLocaleDateString","year","month","day","hour","minute","convertToBTC","value","inputArr","inputs","modifiedInputs","forEach","input","prev_out","undefined","prev","address","addr","newInput","push","outputArr","outputs","modifiedOutputs","out","newOutput","diffPerTx","output","currVal","parseFloat","createTxList","allTx","txsArr","map","tx","i","hash","time","render","length","TxList"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TransactionItem from './transaction_item';\n\nclass TransactionList extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    convertToTime(unix) {\n        const date = new Date(unix * 1000)\n        return date.toLocaleDateString('default', { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' })\n    }\n\n    convertToBTC(value) {\n        return value / 100000000\n    }\n\n    inputArr(inputs) {\n        let modifiedInputs = []\n        inputs.forEach(input => {\n            debugger\n            if (input.prev_out !== undefined) {\n                debugger\n                const prev = input.prev_out\n                const address = prev.addr\n                const value = this.convertToBTC(prev.value)\n                var newInput = {\n                    'address': address,\n                    'value': value,\n                }\n                modifiedInputs.push(newInput)\n            }\n        })\n        return modifiedInputs;\n    }\n\n    outputArr(outputs) {\n        let modifiedOutputs = []\n        outputs.forEach(out => {\n            debugger\n            const address = out.addr\n            const value = this.convertToBTC(out.value)\n            const newOutput = {\n                'address': address,\n                'value': value,\n            }\n            modifiedOutputs.push(newOutput)\n        })\n        return modifiedOutputs\n    }\n\n    diffPerTx(input, output) {\n        let currVal = 0\n        \n        input.forEach(input => {\n            currVal -= parseFloat(input.value)\n        })\n\n        output.forEach(output => {\n            currVal += parseFloat(output.value)\n        })\n\n        return currVal\n    }\n\n    createTxList() {\n        const allTx = this.props.txsArr.map((tx, i) => {\n            debugger\n            const hash = tx.hash\n            const input = this.inputArr(tx.inputs) \n            const output = this.outputArr(tx.out)\n            const time = this.convertToTime(tx.time)\n            const currVal = this.diffPerTx(input, output)\n            return (\n                <TransactionItem\n                    key={i}\n                    hash={hash}\n                    input={input}\n                    output={output}\n                    time={time}\n                    currVal={currVal}\n                />\n            )\n        })\n        return allTx\n    }\n\n    render() {\n        if (this.props.txsArr.length === undefined) return null;\n        const TxList = this.createTxList()\n\n        return (\n            <div className=\"transaction-list\">\n                <h3>Transactions</h3>\n                {TxList}\n            </div>\n        )\n    }\n\n}\n\nexport default TransactionList"]},"metadata":{},"sourceType":"module"}